// Implementation file for parser generated by fsyacc
module FsLatte.Front.Par
#nowarn "64";; // turn off warnings that type variables used in production annotations are instantiated to concrete type
open Microsoft.FSharp.Text.Lexing
open Microsoft.FSharp.Text.Parsing.ParseHelpers
# 2 "Par.fsy"

open FsLatte.Model.Abs

# 10 "Par.fs"
// This type is the type of tokens accepted by the parser
type token = 
  | TOK_boolean
  | TOK_else
  | TOK_false
  | TOK_if
  | TOK_int
  | TOK_return
  | TOK_string
  | TOK_true
  | TOK_void
  | TOK_while
  | TOK_Char of (char)
  | TOK_Double of (float)
  | TOK_Integer of (int)
  | TOK_String of (string)
  | ID of (string)
  | EOF
  | SYMB23
  | SYMB22
  | SYMB21
  | SYMB20
  | SYMB19
  | SYMB18
  | SYMB17
  | SYMB16
  | SYMB15
  | SYMB14
  | SYMB13
  | SYMB12
  | SYMB11
  | SYMB10
  | SYMB9
  | SYMB8
  | SYMB7
  | SEMICOLON
  | RBRACKET
  | LBRACKET
  | COMMA
  | RPAREN
  | LPAREN
// This type is used to give symbolic names to token indexes, useful for error messages
type tokenId = 
    | TOKEN_TOK_boolean
    | TOKEN_TOK_else
    | TOKEN_TOK_false
    | TOKEN_TOK_if
    | TOKEN_TOK_int
    | TOKEN_TOK_return
    | TOKEN_TOK_string
    | TOKEN_TOK_true
    | TOKEN_TOK_void
    | TOKEN_TOK_while
    | TOKEN_TOK_Char
    | TOKEN_TOK_Double
    | TOKEN_TOK_Integer
    | TOKEN_TOK_String
    | TOKEN_ID
    | TOKEN_EOF
    | TOKEN_SYMB23
    | TOKEN_SYMB22
    | TOKEN_SYMB21
    | TOKEN_SYMB20
    | TOKEN_SYMB19
    | TOKEN_SYMB18
    | TOKEN_SYMB17
    | TOKEN_SYMB16
    | TOKEN_SYMB15
    | TOKEN_SYMB14
    | TOKEN_SYMB13
    | TOKEN_SYMB12
    | TOKEN_SYMB11
    | TOKEN_SYMB10
    | TOKEN_SYMB9
    | TOKEN_SYMB8
    | TOKEN_SYMB7
    | TOKEN_SEMICOLON
    | TOKEN_RBRACKET
    | TOKEN_LBRACKET
    | TOKEN_COMMA
    | TOKEN_RPAREN
    | TOKEN_LPAREN
    | TOKEN_end_of_input
    | TOKEN_error
// This type is used to give symbolic names to token indexes, useful for error messages
type nonTerminalId = 
    | NONTERM__startpProgram
    | NONTERM_pProgram
    | NONTERM_Program
    | NONTERM_TopDef
    | NONTERM_TopDefList
    | NONTERM_Ident
    | NONTERM_Arg
    | NONTERM_ArgList
    | NONTERM_Block
    | NONTERM_StmtList
    | NONTERM_Stmt
    | NONTERM_Item
    | NONTERM_ItemList
    | NONTERM_Type
    | NONTERM_TypeList
    | NONTERM_Expr6
    | NONTERM_Expr5
    | NONTERM_Expr4
    | NONTERM_Expr3
    | NONTERM_Expr2
    | NONTERM_Expr1
    | NONTERM_Expr
    | NONTERM_ExprList
    | NONTERM_AddOp
    | NONTERM_MulOp
    | NONTERM_RelOp

// This function maps tokens to integer indexes
let tagOfToken (t:token) = 
  match t with
  | TOK_boolean  -> 0 
  | TOK_else  -> 1 
  | TOK_false  -> 2 
  | TOK_if  -> 3 
  | TOK_int  -> 4 
  | TOK_return  -> 5 
  | TOK_string  -> 6 
  | TOK_true  -> 7 
  | TOK_void  -> 8 
  | TOK_while  -> 9 
  | TOK_Char _ -> 10 
  | TOK_Double _ -> 11 
  | TOK_Integer _ -> 12 
  | TOK_String _ -> 13 
  | ID _ -> 14 
  | EOF  -> 15 
  | SYMB23  -> 16 
  | SYMB22  -> 17 
  | SYMB21  -> 18 
  | SYMB20  -> 19 
  | SYMB19  -> 20 
  | SYMB18  -> 21 
  | SYMB17  -> 22 
  | SYMB16  -> 23 
  | SYMB15  -> 24 
  | SYMB14  -> 25 
  | SYMB13  -> 26 
  | SYMB12  -> 27 
  | SYMB11  -> 28 
  | SYMB10  -> 29 
  | SYMB9  -> 30 
  | SYMB8  -> 31 
  | SYMB7  -> 32 
  | SEMICOLON  -> 33 
  | RBRACKET  -> 34 
  | LBRACKET  -> 35 
  | COMMA  -> 36 
  | RPAREN  -> 37 
  | LPAREN  -> 38 

// This function maps integer indexes to symbolic token ids
let tokenTagToTokenId (tokenIdx:int) = 
  match tokenIdx with
  | 0 -> TOKEN_TOK_boolean 
  | 1 -> TOKEN_TOK_else 
  | 2 -> TOKEN_TOK_false 
  | 3 -> TOKEN_TOK_if 
  | 4 -> TOKEN_TOK_int 
  | 5 -> TOKEN_TOK_return 
  | 6 -> TOKEN_TOK_string 
  | 7 -> TOKEN_TOK_true 
  | 8 -> TOKEN_TOK_void 
  | 9 -> TOKEN_TOK_while 
  | 10 -> TOKEN_TOK_Char 
  | 11 -> TOKEN_TOK_Double 
  | 12 -> TOKEN_TOK_Integer 
  | 13 -> TOKEN_TOK_String 
  | 14 -> TOKEN_ID 
  | 15 -> TOKEN_EOF 
  | 16 -> TOKEN_SYMB23 
  | 17 -> TOKEN_SYMB22 
  | 18 -> TOKEN_SYMB21 
  | 19 -> TOKEN_SYMB20 
  | 20 -> TOKEN_SYMB19 
  | 21 -> TOKEN_SYMB18 
  | 22 -> TOKEN_SYMB17 
  | 23 -> TOKEN_SYMB16 
  | 24 -> TOKEN_SYMB15 
  | 25 -> TOKEN_SYMB14 
  | 26 -> TOKEN_SYMB13 
  | 27 -> TOKEN_SYMB12 
  | 28 -> TOKEN_SYMB11 
  | 29 -> TOKEN_SYMB10 
  | 30 -> TOKEN_SYMB9 
  | 31 -> TOKEN_SYMB8 
  | 32 -> TOKEN_SYMB7 
  | 33 -> TOKEN_SEMICOLON 
  | 34 -> TOKEN_RBRACKET 
  | 35 -> TOKEN_LBRACKET 
  | 36 -> TOKEN_COMMA 
  | 37 -> TOKEN_RPAREN 
  | 38 -> TOKEN_LPAREN 
  | 41 -> TOKEN_end_of_input
  | 39 -> TOKEN_error
  | _ -> failwith "tokenTagToTokenId: bad token"

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
let prodIdxToNonTerminal (prodIdx:int) = 
  match prodIdx with
    | 0 -> NONTERM__startpProgram 
    | 1 -> NONTERM_pProgram 
    | 2 -> NONTERM_pProgram 
    | 3 -> NONTERM_Program 
    | 4 -> NONTERM_TopDef 
    | 5 -> NONTERM_TopDefList 
    | 6 -> NONTERM_TopDefList 
    | 7 -> NONTERM_Ident 
    | 8 -> NONTERM_Arg 
    | 9 -> NONTERM_ArgList 
    | 10 -> NONTERM_ArgList 
    | 11 -> NONTERM_ArgList 
    | 12 -> NONTERM_Block 
    | 13 -> NONTERM_StmtList 
    | 14 -> NONTERM_StmtList 
    | 15 -> NONTERM_Stmt 
    | 16 -> NONTERM_Stmt 
    | 17 -> NONTERM_Stmt 
    | 18 -> NONTERM_Stmt 
    | 19 -> NONTERM_Stmt 
    | 20 -> NONTERM_Stmt 
    | 21 -> NONTERM_Stmt 
    | 22 -> NONTERM_Stmt 
    | 23 -> NONTERM_Stmt 
    | 24 -> NONTERM_Stmt 
    | 25 -> NONTERM_Stmt 
    | 26 -> NONTERM_Stmt 
    | 27 -> NONTERM_Item 
    | 28 -> NONTERM_Item 
    | 29 -> NONTERM_ItemList 
    | 30 -> NONTERM_ItemList 
    | 31 -> NONTERM_Type 
    | 32 -> NONTERM_Type 
    | 33 -> NONTERM_Type 
    | 34 -> NONTERM_Type 
    | 35 -> NONTERM_TypeList 
    | 36 -> NONTERM_TypeList 
    | 37 -> NONTERM_TypeList 
    | 38 -> NONTERM_Expr6 
    | 39 -> NONTERM_Expr6 
    | 40 -> NONTERM_Expr6 
    | 41 -> NONTERM_Expr6 
    | 42 -> NONTERM_Expr6 
    | 43 -> NONTERM_Expr6 
    | 44 -> NONTERM_Expr6 
    | 45 -> NONTERM_Expr5 
    | 46 -> NONTERM_Expr5 
    | 47 -> NONTERM_Expr5 
    | 48 -> NONTERM_Expr4 
    | 49 -> NONTERM_Expr4 
    | 50 -> NONTERM_Expr3 
    | 51 -> NONTERM_Expr3 
    | 52 -> NONTERM_Expr2 
    | 53 -> NONTERM_Expr2 
    | 54 -> NONTERM_Expr1 
    | 55 -> NONTERM_Expr1 
    | 56 -> NONTERM_Expr 
    | 57 -> NONTERM_Expr 
    | 58 -> NONTERM_ExprList 
    | 59 -> NONTERM_ExprList 
    | 60 -> NONTERM_ExprList 
    | 61 -> NONTERM_AddOp 
    | 62 -> NONTERM_AddOp 
    | 63 -> NONTERM_MulOp 
    | 64 -> NONTERM_MulOp 
    | 65 -> NONTERM_MulOp 
    | 66 -> NONTERM_RelOp 
    | 67 -> NONTERM_RelOp 
    | 68 -> NONTERM_RelOp 
    | 69 -> NONTERM_RelOp 
    | 70 -> NONTERM_RelOp 
    | 71 -> NONTERM_RelOp 
    | _ -> failwith "prodIdxToNonTerminal: bad production index"

let _fsyacc_endOfInputTag = 41 
let _fsyacc_tagOfErrorTerminal = 39

// This function gets the name of a token as a string
let token_to_string (t:token) = 
  match t with 
  | TOK_boolean  -> "TOK_boolean" 
  | TOK_else  -> "TOK_else" 
  | TOK_false  -> "TOK_false" 
  | TOK_if  -> "TOK_if" 
  | TOK_int  -> "TOK_int" 
  | TOK_return  -> "TOK_return" 
  | TOK_string  -> "TOK_string" 
  | TOK_true  -> "TOK_true" 
  | TOK_void  -> "TOK_void" 
  | TOK_while  -> "TOK_while" 
  | TOK_Char _ -> "TOK_Char" 
  | TOK_Double _ -> "TOK_Double" 
  | TOK_Integer _ -> "TOK_Integer" 
  | TOK_String _ -> "TOK_String" 
  | ID _ -> "ID" 
  | EOF  -> "EOF" 
  | SYMB23  -> "SYMB23" 
  | SYMB22  -> "SYMB22" 
  | SYMB21  -> "SYMB21" 
  | SYMB20  -> "SYMB20" 
  | SYMB19  -> "SYMB19" 
  | SYMB18  -> "SYMB18" 
  | SYMB17  -> "SYMB17" 
  | SYMB16  -> "SYMB16" 
  | SYMB15  -> "SYMB15" 
  | SYMB14  -> "SYMB14" 
  | SYMB13  -> "SYMB13" 
  | SYMB12  -> "SYMB12" 
  | SYMB11  -> "SYMB11" 
  | SYMB10  -> "SYMB10" 
  | SYMB9  -> "SYMB9" 
  | SYMB8  -> "SYMB8" 
  | SYMB7  -> "SYMB7" 
  | SEMICOLON  -> "SEMICOLON" 
  | RBRACKET  -> "RBRACKET" 
  | LBRACKET  -> "LBRACKET" 
  | COMMA  -> "COMMA" 
  | RPAREN  -> "RPAREN" 
  | LPAREN  -> "LPAREN" 

// This function gets the data carried by a token as an object
let _fsyacc_dataOfToken (t:token) = 
  match t with 
  | TOK_boolean  -> (null : System.Object) 
  | TOK_else  -> (null : System.Object) 
  | TOK_false  -> (null : System.Object) 
  | TOK_if  -> (null : System.Object) 
  | TOK_int  -> (null : System.Object) 
  | TOK_return  -> (null : System.Object) 
  | TOK_string  -> (null : System.Object) 
  | TOK_true  -> (null : System.Object) 
  | TOK_void  -> (null : System.Object) 
  | TOK_while  -> (null : System.Object) 
  | TOK_Char _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | TOK_Double _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | TOK_Integer _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | TOK_String _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | ID _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | EOF  -> (null : System.Object) 
  | SYMB23  -> (null : System.Object) 
  | SYMB22  -> (null : System.Object) 
  | SYMB21  -> (null : System.Object) 
  | SYMB20  -> (null : System.Object) 
  | SYMB19  -> (null : System.Object) 
  | SYMB18  -> (null : System.Object) 
  | SYMB17  -> (null : System.Object) 
  | SYMB16  -> (null : System.Object) 
  | SYMB15  -> (null : System.Object) 
  | SYMB14  -> (null : System.Object) 
  | SYMB13  -> (null : System.Object) 
  | SYMB12  -> (null : System.Object) 
  | SYMB11  -> (null : System.Object) 
  | SYMB10  -> (null : System.Object) 
  | SYMB9  -> (null : System.Object) 
  | SYMB8  -> (null : System.Object) 
  | SYMB7  -> (null : System.Object) 
  | SEMICOLON  -> (null : System.Object) 
  | RBRACKET  -> (null : System.Object) 
  | LBRACKET  -> (null : System.Object) 
  | COMMA  -> (null : System.Object) 
  | RPAREN  -> (null : System.Object) 
  | LPAREN  -> (null : System.Object) 
let _fsyacc_gotos = [| 0us; 65535us; 1us; 65535us; 0us; 1us; 1us; 65535us; 0us; 2us; 2us; 65535us; 0us; 12us; 12us; 12us; 2us; 65535us; 0us; 5us; 12us; 13us; 23us; 65535us; 6us; 7us; 15us; 16us; 21us; 29us; 26us; 55us; 30us; 65us; 37us; 65us; 42us; 65us; 44us; 29us; 46us; 29us; 49us; 65us; 51us; 29us; 56us; 65us; 59us; 55us; 69us; 65us; 73us; 65us; 76us; 65us; 78us; 65us; 83us; 65us; 88us; 65us; 90us; 65us; 91us; 65us; 94us; 65us; 97us; 65us; 2us; 65535us; 8us; 17us; 18us; 17us; 2us; 65535us; 8us; 9us; 18us; 19us; 5us; 65535us; 10us; 11us; 21us; 25us; 44us; 25us; 46us; 25us; 51us; 25us; 1us; 65535us; 20us; 21us; 4us; 65535us; 21us; 23us; 44us; 45us; 46us; 47us; 51us; 52us; 2us; 65535us; 26us; 58us; 59us; 58us; 2us; 65535us; 26us; 27us; 59us; 60us; 8us; 65535us; 0us; 6us; 8us; 15us; 12us; 6us; 18us; 15us; 21us; 26us; 44us; 26us; 46us; 26us; 51us; 26us; 0us; 65535us; 19us; 65535us; 21us; 80us; 30us; 80us; 37us; 80us; 42us; 80us; 44us; 80us; 46us; 80us; 49us; 80us; 51us; 80us; 56us; 80us; 69us; 80us; 73us; 80us; 76us; 77us; 78us; 79us; 83us; 80us; 88us; 80us; 90us; 80us; 91us; 80us; 94us; 80us; 97us; 80us; 17us; 65535us; 21us; 85us; 30us; 85us; 37us; 85us; 42us; 85us; 44us; 85us; 46us; 85us; 49us; 85us; 51us; 85us; 56us; 85us; 69us; 85us; 73us; 85us; 83us; 84us; 88us; 85us; 90us; 85us; 91us; 85us; 94us; 85us; 97us; 85us; 16us; 65535us; 21us; 82us; 30us; 82us; 37us; 82us; 42us; 82us; 44us; 82us; 46us; 82us; 49us; 82us; 51us; 82us; 56us; 82us; 69us; 82us; 73us; 82us; 88us; 81us; 90us; 82us; 91us; 82us; 94us; 82us; 97us; 82us; 15us; 65535us; 21us; 87us; 30us; 87us; 37us; 87us; 42us; 87us; 44us; 87us; 46us; 87us; 49us; 87us; 51us; 87us; 56us; 87us; 69us; 87us; 73us; 87us; 90us; 86us; 91us; 87us; 94us; 87us; 97us; 87us; 14us; 65535us; 21us; 89us; 30us; 89us; 37us; 89us; 42us; 89us; 44us; 89us; 46us; 89us; 49us; 89us; 51us; 89us; 56us; 89us; 69us; 89us; 73us; 89us; 91us; 89us; 94us; 89us; 97us; 89us; 14us; 65535us; 21us; 93us; 30us; 93us; 37us; 93us; 42us; 93us; 44us; 93us; 46us; 93us; 49us; 93us; 51us; 93us; 56us; 93us; 69us; 93us; 73us; 93us; 91us; 92us; 94us; 93us; 97us; 93us; 13us; 65535us; 21us; 53us; 30us; 31us; 37us; 38us; 42us; 43us; 44us; 53us; 46us; 53us; 49us; 50us; 51us; 53us; 56us; 57us; 69us; 96us; 73us; 74us; 94us; 95us; 97us; 96us; 2us; 65535us; 69us; 70us; 97us; 98us; 2us; 65535us; 86us; 88us; 87us; 88us; 2us; 65535us; 81us; 83us; 82us; 83us; 1us; 65535us; 89us; 90us; |]
let _fsyacc_sparseGotoTableRowOffsets = [|0us; 1us; 3us; 5us; 8us; 11us; 35us; 38us; 41us; 47us; 49us; 54us; 57us; 60us; 69us; 70us; 90us; 108us; 125us; 141us; 156us; 171us; 185us; 188us; 191us; 194us; |]
let _fsyacc_stateToProdIdxsTableElements = [| 1us; 0us; 1us; 0us; 1us; 1us; 1us; 1us; 1us; 2us; 1us; 3us; 1us; 4us; 1us; 4us; 1us; 4us; 1us; 4us; 1us; 4us; 1us; 4us; 2us; 5us; 6us; 1us; 6us; 1us; 7us; 1us; 8us; 1us; 8us; 2us; 10us; 11us; 1us; 11us; 1us; 11us; 1us; 12us; 2us; 12us; 14us; 1us; 12us; 1us; 14us; 1us; 15us; 1us; 16us; 1us; 17us; 1us; 17us; 1us; 17us; 5us; 18us; 19us; 20us; 38us; 42us; 1us; 18us; 1us; 18us; 1us; 18us; 1us; 19us; 1us; 19us; 1us; 20us; 1us; 20us; 2us; 21us; 22us; 1us; 21us; 1us; 21us; 1us; 22us; 2us; 23us; 24us; 2us; 23us; 24us; 2us; 23us; 24us; 2us; 23us; 24us; 2us; 23us; 24us; 1us; 24us; 1us; 24us; 1us; 25us; 1us; 25us; 1us; 25us; 1us; 25us; 1us; 25us; 1us; 26us; 1us; 26us; 2us; 27us; 28us; 1us; 28us; 1us; 28us; 2us; 29us; 30us; 1us; 30us; 1us; 30us; 1us; 31us; 1us; 32us; 1us; 33us; 1us; 34us; 2us; 38us; 42us; 1us; 39us; 1us; 40us; 1us; 41us; 1us; 42us; 1us; 42us; 1us; 42us; 1us; 43us; 1us; 44us; 1us; 44us; 1us; 44us; 1us; 45us; 1us; 45us; 1us; 46us; 1us; 46us; 1us; 47us; 2us; 48us; 50us; 2us; 48us; 51us; 1us; 48us; 1us; 48us; 1us; 49us; 2us; 50us; 52us; 2us; 50us; 53us; 1us; 50us; 3us; 52us; 54us; 55us; 1us; 52us; 1us; 54us; 1us; 54us; 2us; 56us; 57us; 1us; 56us; 1us; 56us; 2us; 59us; 60us; 1us; 60us; 1us; 60us; 1us; 61us; 1us; 62us; 1us; 63us; 1us; 64us; 1us; 65us; 1us; 66us; 1us; 67us; 1us; 68us; 1us; 69us; 1us; 70us; 1us; 71us; |]
let _fsyacc_stateToProdIdxsTableRowOffsets = [|0us; 2us; 4us; 6us; 8us; 10us; 12us; 14us; 16us; 18us; 20us; 22us; 24us; 27us; 29us; 31us; 33us; 35us; 38us; 40us; 42us; 44us; 47us; 49us; 51us; 53us; 55us; 57us; 59us; 61us; 67us; 69us; 71us; 73us; 75us; 77us; 79us; 81us; 84us; 86us; 88us; 90us; 93us; 96us; 99us; 102us; 105us; 107us; 109us; 111us; 113us; 115us; 117us; 119us; 121us; 123us; 126us; 128us; 130us; 133us; 135us; 137us; 139us; 141us; 143us; 145us; 148us; 150us; 152us; 154us; 156us; 158us; 160us; 162us; 164us; 166us; 168us; 170us; 172us; 174us; 176us; 178us; 181us; 184us; 186us; 188us; 190us; 193us; 196us; 198us; 202us; 204us; 206us; 208us; 211us; 213us; 215us; 218us; 220us; 222us; 224us; 226us; 228us; 230us; 232us; 234us; 236us; 238us; 240us; 242us; |]
let _fsyacc_action_rows = 110
let _fsyacc_actionTableElements = [|5us; 32768us; 0us; 63us; 4us; 61us; 6us; 62us; 8us; 64us; 39us; 4us; 0us; 49152us; 1us; 32768us; 15us; 3us; 0us; 16385us; 0us; 16386us; 0us; 16387us; 1us; 32768us; 14us; 14us; 1us; 32768us; 38us; 8us; 4us; 16393us; 0us; 63us; 4us; 61us; 6us; 62us; 8us; 64us; 1us; 32768us; 37us; 10us; 1us; 32768us; 35us; 20us; 0us; 16388us; 4us; 16389us; 0us; 63us; 4us; 61us; 6us; 62us; 8us; 64us; 0us; 16390us; 0us; 16391us; 1us; 32768us; 14us; 14us; 0us; 16392us; 1us; 16394us; 36us; 18us; 4us; 16393us; 0us; 63us; 4us; 61us; 6us; 62us; 8us; 64us; 0us; 16395us; 0us; 16397us; 18us; 32768us; 0us; 63us; 2us; 68us; 3us; 41us; 4us; 61us; 5us; 37us; 6us; 62us; 7us; 67us; 8us; 64us; 9us; 48us; 12us; 66us; 13us; 72us; 14us; 14us; 28us; 78us; 29us; 76us; 33us; 24us; 34us; 22us; 35us; 20us; 38us; 73us; 0us; 16396us; 0us; 16398us; 0us; 16399us; 0us; 16400us; 1us; 32768us; 14us; 14us; 1us; 32768us; 33us; 28us; 0us; 16401us; 4us; 16422us; 30us; 35us; 31us; 33us; 32us; 30us; 38us; 69us; 8us; 32768us; 2us; 68us; 7us; 67us; 12us; 66us; 13us; 72us; 14us; 14us; 28us; 78us; 29us; 76us; 38us; 73us; 1us; 32768us; 33us; 32us; 0us; 16402us; 1us; 32768us; 33us; 34us; 0us; 16403us; 1us; 32768us; 33us; 36us; 0us; 16404us; 9us; 32768us; 2us; 68us; 7us; 67us; 12us; 66us; 13us; 72us; 14us; 14us; 28us; 78us; 29us; 76us; 33us; 40us; 38us; 73us; 1us; 32768us; 33us; 39us; 0us; 16405us; 0us; 16406us; 1us; 32768us; 38us; 42us; 8us; 32768us; 2us; 68us; 7us; 67us; 12us; 66us; 13us; 72us; 14us; 14us; 28us; 78us; 29us; 76us; 38us; 73us; 1us; 32768us; 37us; 44us; 17us; 32768us; 0us; 63us; 2us; 68us; 3us; 41us; 4us; 61us; 5us; 37us; 6us; 62us; 7us; 67us; 8us; 64us; 9us; 48us; 12us; 66us; 13us; 72us; 14us; 14us; 28us; 78us; 29us; 76us; 33us; 24us; 35us; 20us; 38us; 73us; 1us; 16407us; 1us; 46us; 17us; 32768us; 0us; 63us; 2us; 68us; 3us; 41us; 4us; 61us; 5us; 37us; 6us; 62us; 7us; 67us; 8us; 64us; 9us; 48us; 12us; 66us; 13us; 72us; 14us; 14us; 28us; 78us; 29us; 76us; 33us; 24us; 35us; 20us; 38us; 73us; 0us; 16408us; 1us; 32768us; 38us; 49us; 8us; 32768us; 2us; 68us; 7us; 67us; 12us; 66us; 13us; 72us; 14us; 14us; 28us; 78us; 29us; 76us; 38us; 73us; 1us; 32768us; 37us; 51us; 17us; 32768us; 0us; 63us; 2us; 68us; 3us; 41us; 4us; 61us; 5us; 37us; 6us; 62us; 7us; 67us; 8us; 64us; 9us; 48us; 12us; 66us; 13us; 72us; 14us; 14us; 28us; 78us; 29us; 76us; 33us; 24us; 35us; 20us; 38us; 73us; 0us; 16409us; 1us; 32768us; 33us; 54us; 0us; 16410us; 1us; 16411us; 32us; 56us; 8us; 32768us; 2us; 68us; 7us; 67us; 12us; 66us; 13us; 72us; 14us; 14us; 28us; 78us; 29us; 76us; 38us; 73us; 0us; 16412us; 1us; 16413us; 36us; 59us; 1us; 32768us; 14us; 14us; 0us; 16414us; 0us; 16415us; 0us; 16416us; 0us; 16417us; 0us; 16418us; 1us; 16422us; 38us; 69us; 0us; 16423us; 0us; 16424us; 0us; 16425us; 8us; 16442us; 2us; 68us; 7us; 67us; 12us; 66us; 13us; 72us; 14us; 14us; 28us; 78us; 29us; 76us; 38us; 73us; 1us; 32768us; 37us; 71us; 0us; 16426us; 0us; 16427us; 8us; 32768us; 2us; 68us; 7us; 67us; 12us; 66us; 13us; 72us; 14us; 14us; 28us; 78us; 29us; 76us; 38us; 73us; 1us; 32768us; 37us; 75us; 0us; 16428us; 6us; 32768us; 2us; 68us; 7us; 67us; 12us; 66us; 13us; 72us; 14us; 14us; 38us; 73us; 0us; 16429us; 6us; 32768us; 2us; 68us; 7us; 67us; 12us; 66us; 13us; 72us; 14us; 14us; 38us; 73us; 0us; 16430us; 0us; 16431us; 3us; 16434us; 22us; 103us; 23us; 102us; 24us; 101us; 3us; 16435us; 22us; 103us; 23us; 102us; 24us; 101us; 8us; 32768us; 2us; 68us; 7us; 67us; 12us; 66us; 13us; 72us; 14us; 14us; 28us; 78us; 29us; 76us; 38us; 73us; 0us; 16432us; 0us; 16433us; 2us; 16436us; 25us; 99us; 29us; 100us; 2us; 16437us; 25us; 99us; 29us; 100us; 8us; 32768us; 2us; 68us; 7us; 67us; 12us; 66us; 13us; 72us; 14us; 14us; 28us; 78us; 29us; 76us; 38us; 73us; 7us; 16439us; 16us; 109us; 17us; 108us; 18us; 107us; 19us; 106us; 20us; 105us; 21us; 104us; 27us; 91us; 8us; 32768us; 2us; 68us; 7us; 67us; 12us; 66us; 13us; 72us; 14us; 14us; 28us; 78us; 29us; 76us; 38us; 73us; 8us; 32768us; 2us; 68us; 7us; 67us; 12us; 66us; 13us; 72us; 14us; 14us; 28us; 78us; 29us; 76us; 38us; 73us; 0us; 16438us; 1us; 16441us; 26us; 94us; 8us; 32768us; 2us; 68us; 7us; 67us; 12us; 66us; 13us; 72us; 14us; 14us; 28us; 78us; 29us; 76us; 38us; 73us; 0us; 16440us; 1us; 16443us; 36us; 97us; 8us; 16442us; 2us; 68us; 7us; 67us; 12us; 66us; 13us; 72us; 14us; 14us; 28us; 78us; 29us; 76us; 38us; 73us; 0us; 16444us; 0us; 16445us; 0us; 16446us; 0us; 16447us; 0us; 16448us; 0us; 16449us; 0us; 16450us; 0us; 16451us; 0us; 16452us; 0us; 16453us; 0us; 16454us; 0us; 16455us; |]
let _fsyacc_actionTableRowOffsets = [|0us; 6us; 7us; 9us; 10us; 11us; 12us; 14us; 16us; 21us; 23us; 25us; 26us; 31us; 32us; 33us; 35us; 36us; 38us; 43us; 44us; 45us; 64us; 65us; 66us; 67us; 68us; 70us; 72us; 73us; 78us; 87us; 89us; 90us; 92us; 93us; 95us; 96us; 106us; 108us; 109us; 110us; 112us; 121us; 123us; 141us; 143us; 161us; 162us; 164us; 173us; 175us; 193us; 194us; 196us; 197us; 199us; 208us; 209us; 211us; 213us; 214us; 215us; 216us; 217us; 218us; 220us; 221us; 222us; 223us; 232us; 234us; 235us; 236us; 245us; 247us; 248us; 255us; 256us; 263us; 264us; 265us; 269us; 273us; 282us; 283us; 284us; 287us; 290us; 299us; 307us; 316us; 325us; 326us; 328us; 337us; 338us; 340us; 349us; 350us; 351us; 352us; 353us; 354us; 355us; 356us; 357us; 358us; 359us; 360us; |]
let _fsyacc_reductionSymbolCounts = [|1us; 2us; 1us; 1us; 6us; 1us; 2us; 1us; 2us; 0us; 1us; 3us; 3us; 0us; 2us; 1us; 1us; 3us; 4us; 3us; 3us; 3us; 2us; 5us; 7us; 5us; 2us; 1us; 3us; 1us; 3us; 1us; 1us; 1us; 1us; 0us; 1us; 3us; 1us; 1us; 1us; 1us; 4us; 1us; 3us; 2us; 2us; 1us; 3us; 1us; 3us; 1us; 3us; 1us; 3us; 1us; 3us; 1us; 0us; 1us; 3us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; |]
let _fsyacc_productionToNonTerminalTable = [|0us; 1us; 1us; 2us; 3us; 4us; 4us; 5us; 6us; 7us; 7us; 7us; 8us; 9us; 9us; 10us; 10us; 10us; 10us; 10us; 10us; 10us; 10us; 10us; 10us; 10us; 10us; 11us; 11us; 12us; 12us; 13us; 13us; 13us; 13us; 14us; 14us; 14us; 15us; 15us; 15us; 15us; 15us; 15us; 15us; 16us; 16us; 16us; 17us; 17us; 18us; 18us; 19us; 19us; 20us; 20us; 21us; 21us; 22us; 22us; 22us; 23us; 23us; 24us; 24us; 24us; 25us; 25us; 25us; 25us; 25us; 25us; |]
let _fsyacc_immediateActions = [|65535us; 49152us; 65535us; 16385us; 16386us; 16387us; 65535us; 65535us; 65535us; 65535us; 65535us; 16388us; 65535us; 16390us; 16391us; 65535us; 16392us; 65535us; 65535us; 16395us; 65535us; 65535us; 16396us; 16398us; 16399us; 16400us; 65535us; 65535us; 16401us; 65535us; 65535us; 65535us; 16402us; 65535us; 16403us; 65535us; 16404us; 65535us; 65535us; 16405us; 16406us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16408us; 65535us; 65535us; 65535us; 65535us; 16409us; 65535us; 16410us; 65535us; 65535us; 16412us; 65535us; 65535us; 16414us; 16415us; 16416us; 16417us; 16418us; 65535us; 16423us; 16424us; 16425us; 65535us; 65535us; 16426us; 16427us; 65535us; 65535us; 16428us; 65535us; 16429us; 65535us; 16430us; 16431us; 65535us; 65535us; 65535us; 16432us; 16433us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16438us; 65535us; 65535us; 16440us; 65535us; 65535us; 16444us; 16445us; 16446us; 16447us; 16448us; 16449us; 16450us; 16451us; 16452us; 16453us; 16454us; 16455us; |]
let _fsyacc_reductions ()  =    [| 
# 389 "Par.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : FsLatte.Model.Abs.Program)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                      raise (Microsoft.FSharp.Text.Parsing.Accept(Microsoft.FSharp.Core.Operators.box _1))
                   )
                 : '_startpProgram));
# 398 "Par.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Program)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 43 "Par.fsy"
                                             _1 
                   )
# 43 "Par.fsy"
                 : FsLatte.Model.Abs.Program));
# 409 "Par.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 44 "Par.fsy"
                                       raise (BnfcUtil.ParseErrorException parseState.ResultRange) 
                   )
# 44 "Par.fsy"
                 : FsLatte.Model.Abs.Program));
# 419 "Par.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'TopDefList)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 46 "Par.fsy"
                                           Program _1 
                   )
# 46 "Par.fsy"
                 : 'Program));
# 430 "Par.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Type)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Ident)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'ArgList)) in
            let _6 = (let data = parseState.GetInput(6) in (Microsoft.FSharp.Core.Operators.unbox data : 'Block)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 48 "Par.fsy"
                                                                      FnDef (_1, _2, _4, _6) 
                   )
# 48 "Par.fsy"
                 : 'TopDef));
# 444 "Par.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'TopDef)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 50 "Par.fsy"
                                          (fun x -> [x]) _1 
                   )
# 50 "Par.fsy"
                 : 'TopDefList));
# 455 "Par.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'TopDef)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'TopDefList)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 51 "Par.fsy"
                                                     (fun (x,xs) -> x::xs) (_1, _2) 
                   )
# 51 "Par.fsy"
                 : 'TopDefList));
# 467 "Par.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 53 "Par.fsy"
                                 Ident _1 
                   )
# 53 "Par.fsy"
                 : 'Ident));
# 478 "Par.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Type)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Ident)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 55 "Par.fsy"
                                       Arg (_1, _2) 
                   )
# 55 "Par.fsy"
                 : 'Arg));
# 490 "Par.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 57 "Par.fsy"
                                [] 
                   )
# 57 "Par.fsy"
                 : 'ArgList));
# 500 "Par.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Arg)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 58 "Par.fsy"
                                    (fun x -> [x]) _1 
                   )
# 58 "Par.fsy"
                 : 'ArgList));
# 511 "Par.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Arg)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'ArgList)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 59 "Par.fsy"
                                                  (fun (x,xs) -> x::xs) (_1, _3) 
                   )
# 59 "Par.fsy"
                 : 'ArgList));
# 523 "Par.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'StmtList)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 61 "Par.fsy"
                                                         Block (List.rev _2) 
                   )
# 61 "Par.fsy"
                 : 'Block));
# 534 "Par.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 63 "Par.fsy"
                                 [] 
                   )
# 63 "Par.fsy"
                 : 'StmtList));
# 544 "Par.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'StmtList)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Stmt)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 64 "Par.fsy"
                                               (fun (x,xs) -> x::xs) (_2, _1) 
                   )
# 64 "Par.fsy"
                 : 'StmtList));
# 556 "Par.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 66 "Par.fsy"
                                       Empty 
                   )
# 66 "Par.fsy"
                 : 'Stmt));
# 566 "Par.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Block)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 67 "Par.fsy"
                                   BStmt _1 
                   )
# 67 "Par.fsy"
                 : 'Stmt));
# 577 "Par.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Type)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'ItemList)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 68 "Par.fsy"
                                                     Decl (_1, _2) 
                   )
# 68 "Par.fsy"
                 : 'Stmt));
# 589 "Par.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Ident)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 69 "Par.fsy"
                                                        Ass (_1, _3) 
                   )
# 69 "Par.fsy"
                 : 'Stmt));
# 601 "Par.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Ident)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 70 "Par.fsy"
                                                   Incr _1 
                   )
# 70 "Par.fsy"
                 : 'Stmt));
# 612 "Par.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Ident)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 71 "Par.fsy"
                                                   Decr _1 
                   )
# 71 "Par.fsy"
                 : 'Stmt));
# 623 "Par.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 72 "Par.fsy"
                                                       Ret _2 
                   )
# 72 "Par.fsy"
                 : 'Stmt));
# 634 "Par.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 73 "Par.fsy"
                                                  VRet  
                   )
# 73 "Par.fsy"
                 : 'Stmt));
# 644 "Par.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'Stmt)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 74 "Par.fsy"
                                                            Cond (_3, _5) 
                   )
# 74 "Par.fsy"
                 : 'Stmt));
# 656 "Par.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'Stmt)) in
            let _7 = (let data = parseState.GetInput(7) in (Microsoft.FSharp.Core.Operators.unbox data : 'Stmt)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 75 "Par.fsy"
                                                                          CondElse (_3, _5, _7) 
                   )
# 75 "Par.fsy"
                 : 'Stmt));
# 669 "Par.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'Stmt)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 76 "Par.fsy"
                                                               While (_3, _5) 
                   )
# 76 "Par.fsy"
                 : 'Stmt));
# 681 "Par.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 77 "Par.fsy"
                                            SExp _1 
                   )
# 77 "Par.fsy"
                 : 'Stmt));
# 692 "Par.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Ident)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 79 "Par.fsy"
                                   NoInit _1 
                   )
# 79 "Par.fsy"
                 : 'Item));
# 703 "Par.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Ident)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 80 "Par.fsy"
                                              Init (_1, _3) 
                   )
# 80 "Par.fsy"
                 : 'Item));
# 715 "Par.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Item)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 82 "Par.fsy"
                                      (fun x -> [x]) _1 
                   )
# 82 "Par.fsy"
                 : 'ItemList));
# 726 "Par.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Item)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'ItemList)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 83 "Par.fsy"
                                                     (fun (x,xs) -> x::xs) (_1, _3) 
                   )
# 83 "Par.fsy"
                 : 'ItemList));
# 738 "Par.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 85 "Par.fsy"
                                         Int 
                   )
# 85 "Par.fsy"
                 : 'Type));
# 748 "Par.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 86 "Par.fsy"
                                         Str 
                   )
# 86 "Par.fsy"
                 : 'Type));
# 758 "Par.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 87 "Par.fsy"
                                         Bool 
                   )
# 87 "Par.fsy"
                 : 'Type));
# 768 "Par.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 88 "Par.fsy"
                                         Void 
                   )
# 88 "Par.fsy"
                 : 'Type));
# 778 "Par.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 90 "Par.fsy"
                                 [] 
                   )
# 90 "Par.fsy"
                 : 'TypeList));
# 788 "Par.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Type)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 91 "Par.fsy"
                                      (fun x -> [x]) _1 
                   )
# 91 "Par.fsy"
                 : 'TypeList));
# 799 "Par.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Type)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'TypeList)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 92 "Par.fsy"
                                                     (fun (x,xs) -> x::xs) (_1, _3) 
                   )
# 92 "Par.fsy"
                 : 'TypeList));
# 811 "Par.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Ident)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 94 "Par.fsy"
                                    EVar _1 
                   )
# 94 "Par.fsy"
                 : 'Expr6));
# 822 "Par.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : int)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 95 "Par.fsy"
                                          ELitInt _1 
                   )
# 95 "Par.fsy"
                 : 'Expr6));
# 833 "Par.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 96 "Par.fsy"
                                       ELitTrue  
                   )
# 96 "Par.fsy"
                 : 'Expr6));
# 843 "Par.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 97 "Par.fsy"
                                        ELitFalse  
                   )
# 97 "Par.fsy"
                 : 'Expr6));
# 853 "Par.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Ident)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'ExprList)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 98 "Par.fsy"
                                                           EApp (_1, _3) 
                   )
# 98 "Par.fsy"
                 : 'Expr6));
# 865 "Par.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 99 "Par.fsy"
                                         EString _1 
                   )
# 99 "Par.fsy"
                 : 'Expr6));
# 876 "Par.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 100 "Par.fsy"
                                                  _2 
                   )
# 100 "Par.fsy"
                 : 'Expr6));
# 887 "Par.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr6)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 102 "Par.fsy"
                                           Neg _2 
                   )
# 102 "Par.fsy"
                 : 'Expr5));
# 898 "Par.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr6)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 103 "Par.fsy"
                                           Not _2 
                   )
# 103 "Par.fsy"
                 : 'Expr5));
# 909 "Par.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr6)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 104 "Par.fsy"
                                    _1 
                   )
# 104 "Par.fsy"
                 : 'Expr5));
# 920 "Par.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr4)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'MulOp)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr5)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 106 "Par.fsy"
                                                EMul (_1, _2, _3) 
                   )
# 106 "Par.fsy"
                 : 'Expr4));
# 933 "Par.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr5)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 107 "Par.fsy"
                                    _1 
                   )
# 107 "Par.fsy"
                 : 'Expr4));
# 944 "Par.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr3)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'AddOp)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr4)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 109 "Par.fsy"
                                                EAdd (_1, _2, _3) 
                   )
# 109 "Par.fsy"
                 : 'Expr3));
# 957 "Par.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr4)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 110 "Par.fsy"
                                    _1 
                   )
# 110 "Par.fsy"
                 : 'Expr3));
# 968 "Par.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr2)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'RelOp)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr3)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 112 "Par.fsy"
                                                ERel (_1, _2, _3) 
                   )
# 112 "Par.fsy"
                 : 'Expr2));
# 981 "Par.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr3)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 113 "Par.fsy"
                                    _1 
                   )
# 113 "Par.fsy"
                 : 'Expr2));
# 992 "Par.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr2)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr1)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 115 "Par.fsy"
                                                 EAnd (_1, _3) 
                   )
# 115 "Par.fsy"
                 : 'Expr1));
# 1004 "Par.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr2)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 116 "Par.fsy"
                                    _1 
                   )
# 116 "Par.fsy"
                 : 'Expr1));
# 1015 "Par.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr1)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 118 "Par.fsy"
                                               EOr (_1, _3) 
                   )
# 118 "Par.fsy"
                 : 'Expr));
# 1027 "Par.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr1)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 119 "Par.fsy"
                                   _1 
                   )
# 119 "Par.fsy"
                 : 'Expr));
# 1038 "Par.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 121 "Par.fsy"
                                 [] 
                   )
# 121 "Par.fsy"
                 : 'ExprList));
# 1048 "Par.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 122 "Par.fsy"
                                      (fun x -> [x]) _1 
                   )
# 122 "Par.fsy"
                 : 'ExprList));
# 1059 "Par.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'ExprList)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 123 "Par.fsy"
                                                     (fun (x,xs) -> x::xs) (_1, _3) 
                   )
# 123 "Par.fsy"
                 : 'ExprList));
# 1071 "Par.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 125 "Par.fsy"
                                     Plus  
                   )
# 125 "Par.fsy"
                 : 'AddOp));
# 1081 "Par.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 126 "Par.fsy"
                                     Minus 
                   )
# 126 "Par.fsy"
                 : 'AddOp));
# 1091 "Par.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 128 "Par.fsy"
                                     Times 
                   )
# 128 "Par.fsy"
                 : 'MulOp));
# 1101 "Par.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 129 "Par.fsy"
                                     Div 
                   )
# 129 "Par.fsy"
                 : 'MulOp));
# 1111 "Par.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 130 "Par.fsy"
                                     Mod 
                   )
# 130 "Par.fsy"
                 : 'MulOp));
# 1121 "Par.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 132 "Par.fsy"
                                     LTH 
                   )
# 132 "Par.fsy"
                 : 'RelOp));
# 1131 "Par.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 133 "Par.fsy"
                                     LE 
                   )
# 133 "Par.fsy"
                 : 'RelOp));
# 1141 "Par.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 134 "Par.fsy"
                                     GTH 
                   )
# 134 "Par.fsy"
                 : 'RelOp));
# 1151 "Par.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 135 "Par.fsy"
                                     GE 
                   )
# 135 "Par.fsy"
                 : 'RelOp));
# 1161 "Par.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 136 "Par.fsy"
                                     EQU 
                   )
# 136 "Par.fsy"
                 : 'RelOp));
# 1171 "Par.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 137 "Par.fsy"
                                     NE 
                   )
# 137 "Par.fsy"
                 : 'RelOp));
|]
# 1182 "Par.fs"
let tables () : Microsoft.FSharp.Text.Parsing.Tables<_> = 
  { reductions= _fsyacc_reductions ();
    endOfInputTag = _fsyacc_endOfInputTag;
    tagOfToken = tagOfToken;
    dataOfToken = _fsyacc_dataOfToken; 
    actionTableElements = _fsyacc_actionTableElements;
    actionTableRowOffsets = _fsyacc_actionTableRowOffsets;
    stateToProdIdxsTableElements = _fsyacc_stateToProdIdxsTableElements;
    stateToProdIdxsTableRowOffsets = _fsyacc_stateToProdIdxsTableRowOffsets;
    reductionSymbolCounts = _fsyacc_reductionSymbolCounts;
    immediateActions = _fsyacc_immediateActions;
    gotos = _fsyacc_gotos;
    sparseGotoTableRowOffsets = _fsyacc_sparseGotoTableRowOffsets;
    tagOfErrorTerminal = _fsyacc_tagOfErrorTerminal;
    parseError = (fun (ctxt:Microsoft.FSharp.Text.Parsing.ParseErrorContext<_>) -> 
                              match parse_error_rich with 
                              | Some f -> f ctxt
                              | None -> parse_error ctxt.Message);
    numTerminals = 42;
    productionToNonTerminalTable = _fsyacc_productionToNonTerminalTable  }
let engine lexer lexbuf startState = (tables ()).Interpret(lexer, lexbuf, startState)
let pProgram lexer lexbuf : FsLatte.Model.Abs.Program =
    Microsoft.FSharp.Core.Operators.unbox ((tables ()).Interpret(lexer, lexbuf, 0))
