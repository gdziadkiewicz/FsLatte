// Signature file for parser generated by fsyacc
module FsLatte.Front.Par
type token = 
  | TOK_boolean
  | TOK_else
  | TOK_false
  | TOK_if
  | TOK_int
  | TOK_return
  | TOK_string
  | TOK_true
  | TOK_void
  | TOK_while
  | TOK_Char of (char)
  | TOK_Double of (float)
  | TOK_Integer of (int)
  | TOK_String of (string)
  | ID of (string)
  | EOF
  | SYMB23
  | SYMB22
  | SYMB21
  | SYMB20
  | SYMB19
  | SYMB18
  | SYMB17
  | SYMB16
  | SYMB15
  | SYMB14
  | SYMB13
  | SYMB12
  | SYMB11
  | SYMB10
  | SYMB9
  | SYMB8
  | SYMB7
  | SEMICOLON
  | RBRACKET
  | LBRACKET
  | COMMA
  | RPAREN
  | LPAREN
type tokenId = 
    | TOKEN_TOK_boolean
    | TOKEN_TOK_else
    | TOKEN_TOK_false
    | TOKEN_TOK_if
    | TOKEN_TOK_int
    | TOKEN_TOK_return
    | TOKEN_TOK_string
    | TOKEN_TOK_true
    | TOKEN_TOK_void
    | TOKEN_TOK_while
    | TOKEN_TOK_Char
    | TOKEN_TOK_Double
    | TOKEN_TOK_Integer
    | TOKEN_TOK_String
    | TOKEN_ID
    | TOKEN_EOF
    | TOKEN_SYMB23
    | TOKEN_SYMB22
    | TOKEN_SYMB21
    | TOKEN_SYMB20
    | TOKEN_SYMB19
    | TOKEN_SYMB18
    | TOKEN_SYMB17
    | TOKEN_SYMB16
    | TOKEN_SYMB15
    | TOKEN_SYMB14
    | TOKEN_SYMB13
    | TOKEN_SYMB12
    | TOKEN_SYMB11
    | TOKEN_SYMB10
    | TOKEN_SYMB9
    | TOKEN_SYMB8
    | TOKEN_SYMB7
    | TOKEN_SEMICOLON
    | TOKEN_RBRACKET
    | TOKEN_LBRACKET
    | TOKEN_COMMA
    | TOKEN_RPAREN
    | TOKEN_LPAREN
    | TOKEN_end_of_input
    | TOKEN_error
type nonTerminalId = 
    | NONTERM__startpProgram
    | NONTERM_pProgram
    | NONTERM_Program
    | NONTERM_TopDef
    | NONTERM_TopDefList
    | NONTERM_Ident
    | NONTERM_Arg
    | NONTERM_ArgList
    | NONTERM_Block
    | NONTERM_StmtList
    | NONTERM_Stmt
    | NONTERM_Item
    | NONTERM_ItemList
    | NONTERM_Type
    | NONTERM_TypeList
    | NONTERM_Expr6
    | NONTERM_Expr5
    | NONTERM_Expr4
    | NONTERM_Expr3
    | NONTERM_Expr2
    | NONTERM_Expr1
    | NONTERM_Expr
    | NONTERM_ExprList
    | NONTERM_AddOp
    | NONTERM_MulOp
    | NONTERM_RelOp
/// This function maps tokens to integer indexes
val tagOfToken: token -> int

/// This function maps integer indexes to symbolic token ids
val tokenTagToTokenId: int -> tokenId

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
val prodIdxToNonTerminal: int -> nonTerminalId

/// This function gets the name of a token as a string
val token_to_string: token -> string
val pProgram : (Microsoft.FSharp.Text.Lexing.LexBuffer<'cty> -> token) -> Microsoft.FSharp.Text.Lexing.LexBuffer<'cty> -> (FsLatte.Model.Abs.Program) 
